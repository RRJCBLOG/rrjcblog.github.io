{"pages":[{"url":"liu-cheng/关于如何防范开发BUG的一些思考.html","text":"关于如何防范开发BUG的一些思考 ​ 由于前几次上线我们开发这边犯了出现了些重大BUG，而且这些BUG中有些是完全可以避免的；就以前出现的这些bug我总结了一下几点来防范于未然，从而来降低我们线上bug率。 在设计参与讨论，提出一些需要程序员自测时候可能会忘记 测试 的点，此外，PM或者QA往往对业务更熟悉，可以提供建议给程序员，那些业务细节不能够忽视，以防止这些地方出现 bug 。 程序员在开发过程中要尽量遵循内部代码开发规范；例如: 在开发中对于存在异常的接口、代码块一定要用try catch 捕捉异常。 程序员在开发时需要明确自己所开发的业务是需要在主线还是分支开发，不明确的可以向自己的项目负责人询问。 程序员在开发过程中坚决不能注释原有代码，除非是自己开发的业务需要。 对模块进行单元测试：遵循测试-代码-测试的原理，写一些成功或失败的案例帮助你识别函数所有可能的输入和代码相应的处理，尽量达到单元测试覆盖率在80%以上。 在提交代码的过程中首先要检查一下自己所提交的代码，其次可以让同组的同事来帮你检查代码，确保代码没有问题后再提交，提交时添加注释来说明本次代码改动的内容。 我如果碰到了一些比较有趣或者通用的bug，会在团队的每天站会，或者群里面跟大家分享，这样大家都会知道这种类型的bug。 提测过程中一定要在邮件中说明本次提测内容以及测试重点，这样方便测试人员去执行测试范围。 使用检测工具来分析自己编写的代码，例如：在java中使用 Findbugs来静态分析代码找出bug。 上线负责人审查代码，上预发布环境时需要负责人进行code review 。 上线负责人在上预发布环境和线上环境时需要通知所有的开发人员，开发人员需要确认自己有没有在本次版本中改动代码。 非工作日和法定节假日前一天坚决不上线，这时候上线不利于跟踪问题。 上线后需要执行一套测试流程，对于一些常用业务、容易出现bug的业务进行优先级排序，按优先级逐一进线上测试。","tags":"流程","title":"关于如何防范开发BUG的一些思考"},{"url":"java/分布式UUID算法snowflake.html","text":"分布式UUID算法snowflake 概述 分布式系统中，有一些需要使用全局唯一ID的场景，这种时候为了防止ID冲突可以使用36位的UUID，但是UUID有一些缺点，首先他相对比较长，另外UUID一般是无序的，而且不是纯数字的。 有些时候我们希望能使用一种简单一些的ID，保持纯数字，并且希望ID能够按照时间有序生成。 而twitter的snowflake解决了这种需求，最初Twitter把存储系统从MySQL迁移到Cassandra，因为Cassandra没有顺序ID生成机制，所以开发了这样一套全局唯一ID生成服务。 目前此套算法为我们提供了银行存管中的流水号服务。 结构 snowflake的结构如下(每部分用-分开): 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 第一位为未使用，接下来的41位为毫秒级时间(41位的长度可以使用69年)，然后是5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点） ，最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号） 一共加起来刚好64位，为一个Long型。(转换成字符串长度为18) snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分），并且效率较高。snowflake每秒能够产生26万个ID。 ok, let's shut up , just show me the code! package com.rrjc.pf.common ; import java.net.InetAddress ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; /** * (a) id构成: 42位的时间前缀 + 10位的节点标识 + 12位的sequence避免并发的数字(12位不够用时强制得到新的时间前缀) * 注意这里进行了小改动: snowkflake是5位的datacenter加5位的机器id; 这里变成使用10位的机器id * (b) 对系统时间的依赖性非常强，需关闭ntp的时间同步功能。当检测到ntp时间调整后，将会拒绝分配id */ public class IdWorker { private final static Logger logger = LoggerFactory . getLogger ( IdWorker . class ); private final long workerId ; private final long epoch = 1403854494756L ; // 时间起始标记点，作为基准，一般取系统的最近时间 private final long workerIdBits = 10L ; // 机器标识位数 private final long maxWorkerId = - 1L &#94; - 1L << this . workerIdBits ; // 机器ID最大值: 1023 private long sequence = 0 L ; // 0，并发控制 private final long sequenceBits = 12L ; //毫秒内自增位 private final long workerIdShift = this . sequenceBits ; // 12 private final long timestampLeftShift = this . sequenceBits + this . workerIdBits ; // 22 private final long sequenceMask = - 1L &#94; - 1L << this . sequenceBits ; // 4095,111111111111,12位 private long lastTimestamp = - 1L ; private IdWorker ( long workerId ) { if ( workerId > this . maxWorkerId || workerId < 0 ) { throw new IllegalArgumentException ( String . format ( \"worker Id can't be greater than %d or less than 0\" , this . maxWorkerId )); } this . workerId = workerId ; } public synchronized long nextId () throws Exception { long timestamp = IdWorker . timeGen (); if ( this . lastTimestamp == timestamp ) { // 如果上一个timestamp与新产生的相等，则sequence加一(0-4095循环); 对新的timestamp，sequence从0开始 this . sequence = this . sequence + 1 & this . sequenceMask ; if ( this . sequence == 0 ) { timestamp = this . tilNextMillis ( this . lastTimestamp ); // 重新生成timestamp } } else { this . sequence = 0 ; } if ( timestamp < this . lastTimestamp ) { logger . error ( String . format ( \"clock moved backwards.Refusing to generate id for %d milliseconds\" , ( this . lastTimestamp - timestamp ))); throw new Exception ( String . format ( \"clock moved backwards.Refusing to generate id for %d milliseconds\" , ( this . lastTimestamp - timestamp ))); } this . lastTimestamp = timestamp ; return timestamp - this . epoch << this . timestampLeftShift | this . workerId << this . workerIdShift | this . sequence ; } private static IdWorker flowIdWorker = new IdWorker ( getworkerHostIp ()); public static IdWorker getFlowIdWorkerInstance () { return flowIdWorker ; } /** * 等待下一个毫秒的到来, 保证返回的毫秒数在参数lastTimestamp之后 */ private long tilNextMillis ( long lastTimestamp ) { long timestamp = IdWorker . timeGen (); while ( timestamp <= lastTimestamp ) { timestamp = IdWorker . timeGen (); } return timestamp ; } /** * 获得系统当前毫秒数 */ private static long timeGen () { return System . currentTimeMillis (); } /** * * @param bytes * @return int */ public static int getworkerHostIp () { try { byte [] bytes = InetAddress . getLocalHost (). getAddress (); return Integer . valueOf ( bytes [ 3 ] & 0xFF ); } catch ( Exception e ) { logger . error ( e . getMessage (), e ); return 1 ; } } public static void main ( String [] args ) throws Exception { IdWorker idWorker = IdWorker . getFlowIdWorkerInstance (); System . out . println ( idWorker . nextId ()); System . out . println ( idWorker . nextId ()); } } 经5万的并发，亦不会有重复的id出现。","tags":"Java","title":"分布式UUID算法snowflake"}]}